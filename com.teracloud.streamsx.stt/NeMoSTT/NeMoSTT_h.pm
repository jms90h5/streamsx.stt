
package NeMoSTT_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Annotation; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeEvaluator; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::TupleValue; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
       # Get parameters
       my $modelPath = $model->getParameterByName("modelPath");
       my $audioFormat = $model->getParameterByName("audioFormat");
       my $chunkDurationMs = $model->getParameterByName("chunkDurationMs");
       my $minSpeechDurationMs = $model->getParameterByName("minSpeechDurationMs");
   print "\n";
   print "\n";
   print '/* Additional includes for NeMoSTT operator */', "\n";
   print '#include <NeMoSTTWrapper.hpp>', "\n";
   print '#include <vector>', "\n";
   print '#include <memory>', "\n";
   print "\n";
   SPL::CodeGen::headerPrologue($model);
   print "\n";
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR ', "\n";
   print '{', "\n";
   print 'public:', "\n";
   print '    MY_OPERATOR();', "\n";
   print '    virtual ~MY_OPERATOR(); ', "\n";
   print "\n";
   print '    void allPortsReady(); ', "\n";
   print '    void prepareToShutdown(); ', "\n";
   print '    ', "\n";
   print '    void process(Tuple const & tuple, uint32_t port);', "\n";
   print '    void process(Punctuation const & punct, uint32_t port);', "\n";
   print '    ', "\n";
   print 'private:', "\n";
   print '    // NeMo STT implementation', "\n";
   print '    std::unique_ptr<com::teracloud::streams::stt::NeMoSTTWrapper> nemoSTT_;', "\n";
   print '    ', "\n";
   print '    // Audio parameters', "\n";
   print '    int sampleRate_;', "\n";
   print '    int channels_;', "\n";
   print '    ', "\n";
   print '    // Model path', "\n";
   print '    std::string modelPath_;', "\n";
   print '    ', "\n";
   print '    // Configuration', "\n";
   print '    int chunkDurationMs_;', "\n";
   print '    int minSpeechDurationMs_;', "\n";
   print '    ', "\n";
   print '    // Audio buffer', "\n";
   print '    std::vector<float> audioBuffer_;', "\n";
   print '    ', "\n";
   print '    // Helper methods', "\n";
   print '    void processAudioData(const void* data, size_t bytes, int bitsPerSample);', "\n";
   print '    void outputTranscription(const std::string& text);', "\n";
   print '    int getSampleRate() const;', "\n";
   print '}; ', "\n";
   print "\n";
   SPL::CodeGen::headerEpilogue($model);
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
