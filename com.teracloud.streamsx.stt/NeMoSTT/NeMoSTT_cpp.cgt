<%
    # Get parameters
    my $modelPath = $model->getParameterByName("modelPath");
    my $audioFormat = $model->getParameterByName("audioFormat");
    my $chunkDurationMs = $model->getParameterByName("chunkDurationMs");
    my $minSpeechDurationMs = $model->getParameterByName("minSpeechDurationMs");
    
    # Get input/output ports
    my $inputPort = $model->getInputPortAt(0);
    my $outputPort = $model->getOutputPortAt(0);
%>

/* Additional includes for NeMoSTT operator */
#include <iostream>
#include <cstring>

<%SPL::CodeGen::implementationPrologue($model);%>

<%
    my $modelPathValue = $modelPath->getValueAt(0)->getCppExpression();
    my $audioFormatValue = $audioFormat ? '"' . $audioFormat->getValueAt(0)->getSPLExpression() . '"' : '"mono16k"';
    my $chunkDurationValue = $chunkDurationMs ? $chunkDurationMs->getValueAt(0)->getCppExpression() : "5000";
    my $minSpeechDurationValue = $minSpeechDurationMs ? $minSpeechDurationMs->getValueAt(0)->getCppExpression() : "500";
%>

MY_OPERATOR::MY_OPERATOR()
    : sampleRate_(16000),
      channels_(1),
      modelPath_(<%=$modelPathValue%>),
      tokensPath_(),
      chunkDurationMs_(<%=$chunkDurationValue%>),
      minSpeechDurationMs_(<%=$minSpeechDurationValue%>)
{
    // Parse audio format
    std::string format = <%=$audioFormatValue%>;
    if (format == "mono8k") {
        sampleRate_ = 8000;
    } else if (format == "mono16k") {
        sampleRate_ = 16000;
    } else if (format == "mono22k") {
        sampleRate_ = 22050;
    } else if (format == "mono44k") {
        sampleRate_ = 44100;
    } else if (format == "mono48k") {
        sampleRate_ = 48000;
    }
    
    SPLAPPTRC(L_DEBUG, "NeMoSTT constructor: modelPath=" << modelPath_ 
              << ", sampleRate=" << sampleRate_ 
              << ", chunkDuration=" << chunkDurationMs_ << "ms"
              << ", minSpeechDuration=" << minSpeechDurationMs_ << "ms", 
              SPL_OPER_DBG);
}

MY_OPERATOR::~MY_OPERATOR() 
{
    SPLAPPTRC(L_DEBUG, "NeMoSTT destructor", SPL_OPER_DBG);
}

void MY_OPERATOR::allPortsReady() 
{
    SPLAPPTRC(L_DEBUG, "NeMoSTT allPortsReady", SPL_OPER_DBG);
    
    // Derive tokens path from model path
    std::string modelDir = modelPath_;
    size_t lastSlash = modelDir.find_last_of("/\\");
    if (lastSlash != std::string::npos) {
        modelDir = modelDir.substr(0, lastSlash);
        tokensPath_ = modelDir + "/tokens.txt";
    } else {
        tokensPath_ = "tokens.txt";
    }
    
    // Initialize NeMo CTC implementation
    nemoSTT_ = createNeMoCTCImpl();
    
    if (!nemoSTT_->initialize(modelPath_, tokensPath_)) {
        SPLAPPTRC(L_ERROR, "Failed to initialize NeMo CTC model: " << modelPath_, SPL_OPER_DBG);
        throw std::runtime_error("Failed to initialize NeMo CTC model");
    }
    
    SPLAPPTRC(L_INFO, "NeMo model initialized successfully", SPL_OPER_DBG);
}

void MY_OPERATOR::prepareToShutdown() 
{
    SPLAPPTRC(L_DEBUG, "NeMoSTT prepareToShutdown", SPL_OPER_DBG);
}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    SPLAPPTRC(L_TRACE, "NeMoSTT process tuple", SPL_OPER_DBG);
    
    const IPort0Type & ituple = static_cast<const IPort0Type &>(tuple);
    
    // Extract audio data from input tuple
    // Expecting tuple with audioChunk (blob) and audioTimestamp (uint64) attributes
    const SPL::blob& audioBlob = ituple.get_audioChunk();
    const void* audioData = audioBlob.getData();
    uint64_t audioSize = audioBlob.getSize();
    
    // Convert 16-bit audio to float samples
    const int16_t* samples = static_cast<const int16_t*>(audioData);
    size_t numSamples = audioSize / sizeof(int16_t);
    
    std::vector<float> floatSamples(numSamples);
    for (size_t i = 0; i < numSamples; ++i) {
        floatSamples[i] = static_cast<float>(samples[i]) / 32768.0f;
    }
    
    // Transcribe audio chunk
    std::string transcription = nemoSTT_->transcribe(floatSamples);
    
    // Output transcription if not empty
    if (!transcription.empty()) {
        outputTranscription(transcription);
    }
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
    SPLAPPTRC(L_TRACE, "NeMoSTT process punctuation: " << punct, SPL_OPER_DBG);
    
    // Forward punctuation processing (CTC model handles each chunk independently)
    
    // Forward punctuation
    submit(punct, 0);
}


void MY_OPERATOR::outputTranscription(const std::string& text)
{
    if (text.empty()) return;
    
    SPLAPPTRC(L_INFO, "Transcription: " << text, SPL_OPER_DBG);
    
    // Create output tuple
    OPort0Type otuple;
    
    // Set transcription attribute (expecting rstring transcription)
    otuple.set_transcription(text);
    
    // Submit output tuple
    submit(otuple, 0);
}

<%SPL::CodeGen::implementationEpilogue($model);%>