namespace CppONNX_OnnxSTT;
use com.teracloud.streamsx.stt::*;

/**
 * Test IBM Culture audio transcription using NVIDIA FastConformer with C++ ONNX Runtime
 */
composite IBMCultureTest {
    param
        expression<rstring> $encoderModel : "../../models/nemo_fastconformer_streaming/conformer_ctc_dynamic.onnx";
        expression<rstring> $vocabFile : "../../models/nemo_fastconformer_streaming/tokenizer.txt";
        expression<rstring> $cmvnFile : "models/global_cmvn.stats";
        
    graph
        // Audio source - reads IBM culture audio file  
        stream<blob audioChunk, uint64 audioTimestamp> AudioStream = FileAudioSource() {
            param
                filename: "../../test_data/audio/11-ibm-culture-2min-16k.wav";
                blockSize: 3200u;  // 100ms of 16kHz 16-bit mono audio
                sampleRate: 16000;
                bitsPerSample: 16;
                channelCount: 1;
        }
        
        // FastConformer ONNX speech recognition using C++ implementation
        stream<rstring text, boolean isFinal, float64 confidence> Transcription = OnnxSTT(AudioStream) {
            param
                encoderModel: $encoderModel;
                vocabFile: $vocabFile;
                cmvnFile: $cmvnFile;
                sampleRate: 16000;
                chunkSizeMs: 100;
                provider: "CPU";
                numThreads: 4;
        }
        
        // Display results
        () as ResultDisplay = Custom(Transcription) {
            logic
                state: {
                    mutable rstring fullTranscript = "";
                    mutable uint64 resultCount = 0ul;
                }
                
                onTuple Transcription: {
                    resultCount++;
                    
                    // Accumulate transcript
                    if (text != "") {
                        fullTranscript = fullTranscript + " " + text;
                        
                        // Display current result
                        printStringLn("[" + (rstring)resultCount + "] " + text);
                    }
                }
                
                onPunct Transcription: {
                    if (currentPunct() == Sys.FinalMarker) {
                        printStringLn("\n=== FULL FASTCONFORMER ONNX TRANSCRIPT ===");
                        printStringLn("Model: FastConformer (derived from nvidia/stt_en_fastconformer_hybrid_large_streaming_multi)");
                        printStringLn("Implementation: C++ ONNX Runtime");
                        printStringLn(fullTranscript);
                        printStringLn("\nTotal segments: " + (rstring)resultCount);
                    }
                }
        }
}