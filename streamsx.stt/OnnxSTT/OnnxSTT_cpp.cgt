/*
 * OnnxSTT operator implementation
 */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
    my $encoderModel = $model->getParameterByName("encoderModel")->getValueAt(0)->getCppExpression();
    my $vocabFile = $model->getParameterByName("vocabFile")->getValueAt(0)->getCppExpression();
    my $cmvnFile = $model->getParameterByName("cmvnFile")->getValueAt(0)->getCppExpression();
    
    my $sampleRate = $model->getParameterByName("sampleRate");
    $sampleRate = $sampleRate ? $sampleRate->getValueAt(0)->getCppExpression() : "16000";
    
    my $chunkSizeMs = $model->getParameterByName("chunkSizeMs");
    $chunkSizeMs = $chunkSizeMs ? $chunkSizeMs->getValueAt(0)->getCppExpression() : "100";
    
    my $numThreads = $model->getParameterByName("numThreads");
    $numThreads = $numThreads ? $numThreads->getValueAt(0)->getCppExpression() : "4";
    
    my $provider = $model->getParameterByName("provider");
    my $useGpu = "false";
    if ($provider && $provider->getValueAt(0)->getSPLExpression() ne "CPU") {
        $useGpu = "true";
    }
%>

// Implementation code starts here
#include <SPL/Runtime/Common/ApplicationRuntimeMessage.h>
#include <SPL/Runtime/Utility/LogTraceMessage.h>
#include <iostream>
#include <vector>

using namespace SPL;
using namespace std;

// Using the SPL-generated namespace and class names

MY_OPERATOR::MY_OPERATOR() 
    : initialized_(false)
    , audio_timestamp_ms_(0)
    , total_samples_processed_(0) {
    
    SPLAPPTRC(L_DEBUG, "OnnxSTT operator constructor", "OnnxSTT");
}

MY_OPERATOR::~MY_OPERATOR() {
    SPLAPPTRC(L_DEBUG, "OnnxSTT operator destructor", "OnnxSTT");
}

void MY_OPERATOR::initialize() {
    if (initialized_) return;
    
    try {
        // Configure ONNX implementation
        config_.encoder_onnx_path = <%=$encoderModel%>;
        config_.vocab_path = <%=$vocabFile%>;
        config_.cmvn_stats_path = <%=$cmvnFile%>;
        config_.sample_rate = <%=$sampleRate%>;
        config_.chunk_size_ms = <%=$chunkSizeMs%>;
        config_.num_threads = <%=$numThreads%>;
        config_.use_gpu = <%=$useGpu%>;
        
        SPLAPPTRC(L_INFO, "Initializing OnnxSTT with model: " + config_.encoder_onnx_path, "OnnxSTT");
        
        // Create implementation
        onnx_impl_ = onnx_stt::createOnnxSTT(config_);
        
        // Initialize
        if (!onnx_impl_->initialize()) {
            SPLAPPTRC(L_ERROR, "Failed to initialize OnnxSTT", "OnnxSTT");
            throw std::runtime_error("OnnxSTT initialization failed");
        }
        
        initialized_ = true;
        SPLAPPTRC(L_INFO, "OnnxSTT initialized successfully", "OnnxSTT");
        
    } catch (const std::exception& e) {
        SPLAPPTRC(L_ERROR, "Exception during initialization: " + string(e.what()), "OnnxSTT");
        throw;
    }
}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
    // Initialize on first tuple
    if (!initialized_) {
        initialize();
    }
    
    AutoPortMutex apm(_mutex, *this);
    
    const IPort0Type& iport = static_cast<const IPort0Type&>(tuple);
    
    // Get audio data
    processAudioData(iport.get_audioChunk());
    
    // Get timestamp
    audio_timestamp_ms_ = iport.get_audioTimestamp();
}

void MY_OPERATOR::processAudioData(const SPL::blob& audio_blob) {
    // Get audio samples
    const int16_t* samples = reinterpret_cast<const int16_t*>(audio_blob.getData());
    size_t num_samples = audio_blob.getSize() / sizeof(int16_t);
    
    if (num_samples == 0) return;
    
    // Process with ONNX implementation
    auto result = onnx_impl_->processAudioChunk(samples, num_samples, audio_timestamp_ms_);
    
    // Update stats
    total_samples_processed_ += num_samples;
    audio_timestamp_ms_ += (num_samples * 1000) / config_.sample_rate;
    
    // Submit result if we have text
    if (!result.text.empty()) {
        submitResult(result);
    }
    
    // Log performance periodically
    if (total_samples_processed_ % (config_.sample_rate * 10) == 0) {
        auto stats = onnx_impl_->getStats();
        SPLAPPTRC(L_INFO, 
            "Processed " + to_string(total_samples_processed_ / config_.sample_rate) + 
            " seconds, RTF: " + to_string(stats.real_time_factor), 
            "OnnxSTT");
    }
}

void MY_OPERATOR::submitResult(const onnx_stt::OnnxSTTInterface::TranscriptionResult& result) {
    // Create output tuple
    OPort0Type otuple;
    
    // Set attributes based on output schema: text, isFinal, confidence
    otuple.set_text(result.text);
    otuple.set_isFinal(result.is_final);
    otuple.set_confidence(result.confidence);
    
    // Submit the tuple
    submit(otuple, 0);
    
    SPLAPPTRC(L_DEBUG, 
        "Submitted: " + result.text + 
        " (final=" + to_string(result.is_final) + 
        ", latency=" + to_string(result.latency_ms) + "ms)", 
        "OnnxSTT");
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
    if (punct == Punctuation::FinalMarker) {
        // Reset the decoder on final punctuation
        if (onnx_impl_) {
            onnx_impl_->reset();
            SPLAPPTRC(L_DEBUG, "Reset decoder on final punctuation", "OnnxSTT");
        }
    }
    
    // Forward punctuation
    submit(punct, 0);
}

// End of implementation

<%SPL::CodeGen::implementationEpilogue($model);%>